import { Button, Item, GridList } from "react-aria-components";
import {
  motion,
  animate,
  AnimatePresence,
  useMotionValue,
  useIsPresent,
  useMotionTemplate,
  useMotionValueEvent
} from "framer-motion";
import { useRef, useState } from "react";
import messages from "./messages.json";
import { SelectionCheckmark } from "./SelectionCheckmark";

const MotionItem = motion(Item);
const inertiaTransition = {
  type: "inertia",
  bounceStiffness: 300,
  bounceDamping: 40,
  timeConstant: 300
};

export default function SwipableList() {
  let [items, setItems] = useState(messages.emails);
  let [selectedKeys, setSelectedKeys] = useState(new Set());
  let [selectionMode, setSelectionMode] = useState("none");

  return (
    <div className="flex flex-col h-full w-full sm:w-[400px]">
      {/* Toolbar */}
      <div className="flex p-4 justify-between">
        <Button
          className="text-blue-600 text-lg outline-none transition data-[pressed]:text-blue-700 data-[focus-visible]:ring disabled:text-gray-400"
          style={{ opacity: selectionMode === "none" ? 0 : 1 }}
          isDisabled={selectedKeys.size === 0}
          onPress={() => {
            setItems(items.filter((i) => !selectedKeys.has(i.id)));
            setSelectedKeys(new Set());
            setSelectionMode("none");
          }}
        >
          Delete
        </Button>
        <Button
          className="text-blue-600 text-lg outline-none data-[pressed]:text-blue-700 data-[focus-visible]:ring"
          onPress={() => {
            setSelectionMode((m) => (m === "none" ? "multiple" : "none"));
            setSelectedKeys(new Set());
          }}
        >
          {selectionMode === "none" ? "Edit" : "Cancel"}
        </Button>
      </div>
      <GridList
        className="relative flex-1 overflow-auto"
        onAction={selectionMode === "none" ? () => {} : undefined}
        selectionMode={selectionMode}
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
      >
        <AnimatePresence>
          {items.map((item) => (
            <ListItem
              key={item.id}
              id={item.id}
              onRemove={() => setItems(items.filter((i) => i !== item))}
            >
              <div className="flex flex-col text-sm cursor-default">
                <div className="flex justify-between">
                  <p className="font-semibold text-base">{item.sender}</p>
                  <p className="text-gray-500">{item.date}</p>
                </div>
                <p>{item.subject}</p>
                <p className="line-clamp-2 text-gray-500">{item.message}</p>
              </div>
            </ListItem>
          ))}
        </AnimatePresence>
      </GridList>
    </div>
  );
}

function ListItem({ id, children, onRemove }) {
  let ref = useRef();
  let x = useMotionValue(0);
  let isPresent = useIsPresent();
  let xPx = useMotionTemplate`${x}px`;

  // Align the text in the remove button to the left if the
  // user has swiped at least 80% of the width.
  let [align, setAlign] = useState("end");
  useMotionValueEvent(x, "change", (x) => {
    let a = x < -ref.current?.offsetWidth * 0.8 ? "start" : "end";
    setAlign(a);
  });

  return (
    <MotionItem
      id={id}
      className="outline-none group relative overflow-clip border-t last:border-b border-gray-200 bg-white data-[pressed]:bg-gray-100 aria-selected:bg-gray-100 data-[focus-visible]:outline data-[focus-visible]:outline-blue-600 data-[focus-visible]:-outline-offset-2"
      layout
      transition={{ duration: 0.25 }}
      exit={{ opacity: 0 }}
      // Take item out of the flow if it is being removed.
      style={{ position: isPresent ? "relative" : "absolute" }}
    >
      {({ selectionMode, isSelected }) => (
        // Content of the item can be swiped to reveal the delete button, or fully swiped to delete.
        <motion.div
          ref={ref}
          style={{ x, "--x": xPx }}
          className="flex items-center"
          drag={selectionMode === "none" ? "x" : undefined}
          dragConstraints={{ right: 0 }}
          onDragEnd={(e, { offset }) => {
            // If the user dragged past 80% of the width, remove the item
            // otherwise animate back to the nearest snap point.
            let v = offset.x > -20 ? 0 : -100;
            if (x.get() < -ref.current.offsetWidth * 0.8) {
              v = -ref.current.offsetWidth;
              onRemove();
            }
            animate(x, v, { ...inertiaTransition, min: v, max: v });
          }}
          onDragStart={() => {
            // Cancel react-aria press event when dragging starts.
            document.dispatchEvent(new PointerEvent("pointercancel"));
          }}
        >
          {selectionMode === "multiple" && (
            <SelectionCheckmark isSelected={isSelected} />
          )}
          <motion.div
            layout
            layoutDependency={selectionMode}
            transition={{ duration: 0.25 }}
            className="relative flex items-center px-4 py-2 z-10"
          >
            {children}
          </motion.div>
          {selectionMode === "none" && (
            <Button
              className="bg-red-600 data-[pressed]:bg-red-700 cursor-default outline-none transition-colors text-white flex items-center absolute top-0 left-[100%] py-2 h-full z-0 isolate data-[focus-visible]:outline data-[focus-visible]:outline-blue-600 data-[focus-visible]:-outline-offset-2"
              style={{
                // Calculate the size of the button based on the drag position,
                // which is stored in a CSS variable above.
                width: "max(100px, calc(-1 * var(--x)))",
                justifyContent: align
              }}
              onPress={onRemove}
              // Move the button into view when it is focused with the keyboard
              // (e.g. via the arrow keys).
              onFocus={() => x.set(-100)}
              onBlur={() => x.set(0)}
            >
              <motion.span
                initial={false}
                className="px-4"
                animate={{
                  // Whenever the alignment changes, perform a keyframe animation
                  // between the previous position and new position. This is done
                  // by calculating a transform for the previous alignment and
                  // animating it back to zero.
                  transform:
                    align === "start"
                      ? ["translateX(calc(-100% - var(--x)))", "translateX(0)"]
                      : ["translateX(calc(100% + var(--x)))", "translateX(0)"]
                }}
              >
                Delete
              </motion.span>
            </Button>
          )}
        </motion.div>
      )}
    </MotionItem>
  );
}
